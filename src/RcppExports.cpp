// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// CtildeStat2d_cpp
NumericMatrix CtildeStat2d_cpp(NumericVector x, NumericVector y, double lambdao, NumericVector lambdaa, NumericVector lambda, IntegerVector k1a, IntegerVector k2a);
RcppExport SEXP _mediator_CtildeStat2d_cpp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaoSEXP, SEXP lambdaaSEXP, SEXP lambdaSEXP, SEXP k1aSEXP, SEXP k2aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambdao(lambdaoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdaa(lambdaaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type k1a(k1aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type k2a(k2aSEXP);
    rcpp_result_gen = Rcpp::wrap(CtildeStat2d_cpp(x, y, lambdao, lambdaa, lambda, k1a, k2a));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihood
arma::vec log_likelihood(const arma::mat& theta, const arma::mat& points, const arma::vec& lower_bound, const arma::vec& upper_bound, const Rcpp::DataFrame& nd_grid, const Rcpp::Nullable<arma::uvec>& marks, const int N, const bool use_verbose);
RcppExport SEXP _mediator_log_likelihood(SEXP thetaSEXP, SEXP pointsSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP, SEXP nd_gridSEXP, SEXP marksSEXP, SEXP NSEXP, SEXP use_verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type nd_grid(nd_gridSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<arma::uvec>& >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_verbose(use_verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood(theta, points, lower_bound, upper_bound, nd_grid, marks, N, use_verbose));
    return rcpp_result_gen;
END_RCPP
}
// start_profiler
SEXP start_profiler(SEXP str);
RcppExport SEXP _mediator_start_profiler(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(start_profiler(str));
    return rcpp_result_gen;
END_RCPP
}
// stop_profiler
SEXP stop_profiler();
RcppExport SEXP _mediator_stop_profiler() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(stop_profiler());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mediator_CtildeStat2d_cpp", (DL_FUNC) &_mediator_CtildeStat2d_cpp, 7},
    {"_mediator_log_likelihood", (DL_FUNC) &_mediator_log_likelihood, 8},
    {"_mediator_start_profiler", (DL_FUNC) &_mediator_start_profiler, 1},
    {"_mediator_stop_profiler", (DL_FUNC) &_mediator_stop_profiler, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_mediator(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
