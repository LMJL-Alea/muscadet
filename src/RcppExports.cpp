// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CtildeStat2d_cpp
NumericMatrix CtildeStat2d_cpp(NumericVector x, NumericVector y, double lambdao, NumericVector lambdaa, NumericVector lambda, IntegerVector k1a, IntegerVector k2a);
RcppExport SEXP _muscadet_CtildeStat2d_cpp(SEXP xSEXP, SEXP ySEXP, SEXP lambdaoSEXP, SEXP lambdaaSEXP, SEXP lambdaSEXP, SEXP k1aSEXP, SEXP k2aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambdao(lambdaoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdaa(lambdaaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type k1a(k1aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type k2a(k2aSEXP);
    rcpp_result_gen = Rcpp::wrap(CtildeStat2d_cpp(x, y, lambdao, lambdaa, lambda, k1a, k2a));
    return rcpp_result_gen;
END_RCPP
}

// log_likelihood
arma::vec log_likelihood(const arma::mat& theta, const arma::mat& points, const arma::vec& lower_bound, const arma::vec& upper_bound, const Rcpp::DataFrame& nd_grid, const Rcpp::Nullable<arma::uvec>& marks, const unsigned int num_threads, const unsigned int N, const unsigned int verbose_level);
RcppExport SEXP _muscadet_log_likelihood(SEXP thetaSEXP, SEXP pointsSEXP, SEXP lower_boundSEXP, SEXP upper_boundSEXP, SEXP nd_gridSEXP, SEXP marksSEXP, SEXP num_threadsSEXP, SEXP NSEXP, SEXP verbose_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lower_bound(lower_boundSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type upper_bound(upper_boundSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type nd_grid(nd_gridSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<arma::uvec>& >::type marks(marksSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type verbose_level(verbose_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood(theta, points, lower_bound, upper_bound, nd_grid, marks, num_threads, N, verbose_level));
    return rcpp_result_gen;
END_RCPP
}

// rbidpp_impl
Rcpp::List rbidpp_impl(const int N, const double L, const double rho1, const double rho2, const double alpha1, const double alpha2, const double alpha12, const double tau, const unsigned int nbThreads);
RcppExport SEXP _muscadet_rbidpp_impl(SEXP NSEXP, SEXP LSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha12SEXP, SEXP tauSEXP, SEXP nbThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha12(alpha12SEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type nbThreads(nbThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(rbidpp_impl(N, L, rho1, rho2, alpha1, alpha2, alpha12, tau, nbThreads));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_DPP();

static const R_CallMethodDef CallEntries[] = {
    {"_muscadet_CtildeStat2d_cpp", (DL_FUNC) &_muscadet_CtildeStat2d_cpp, 7},
    {"_muscadet_log_likelihood", (DL_FUNC) &_muscadet_log_likelihood, 9},
    {"_muscadet_rbidpp_impl", (DL_FUNC) &_muscadet_rbidpp_impl, 9},
    {"_rcpp_module_boot_DPP", (DL_FUNC) &_rcpp_module_boot_DPP, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_muscadet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
